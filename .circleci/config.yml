version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        # default: ${CIRCLECI_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.Workflow_ID >>"
            aws s3 ls
            aws s3 rm "s3://udapeople-<< parameters.Workflow_ID >>" --recursive 
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.Workflow_ID >>"
  #           exit 1

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -k  https://kvdb.io/8CULQZL66SNsYjsphaujfc/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test

# Analyze Stage                     
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

# IAC
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
#               exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
#               exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filter "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            # aws cloudformation describe-stacks \
            # --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            # --query "Stacks[0].Outputs[0].OutputValue" \
            # --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment:
          Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'  

#       # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "production"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["14:33:f0:81:84:10:a6:4a:03:a2:7a:8c:1c:25:38:de"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
            # exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
            # exit 1
      
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
           Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'  



  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            # npm cache clean --force
            # rm -rf node_modules && rm package-lock.json
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            sudo apt-get install ca-certificates
            if grep -q "has been executed successfully"  ./backend/migrations_dump.txt   
            then
              curl -k https://kvdb.io/8CULQZL66SNsYjsphaujfc/migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -d "1"
            # else
            #   curl -k https://kvdb.io/8CULQZL66SNsYjsphaujfc/migration_${CIRCLE_WORKFLOW_ID:0:7} \
            #     -d "0"
            fi
            # exit 1
     # Here's where you will add some code to rollback on failure  
      - destroy-environment:
           Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'  

      # - revert-migrations


  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
           Workflow_ID: '${CIRCLECI_WORKFLOW_ID:0:7}'
      # - revert-migrations
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES

    steps:
      - checkout
      # - install_awscli
      - add_ssh_keys:
          fingerprints: ["14:33:f0:81:84:10:a6:4a:03:a2:7a:8c:1c:25:38:de"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm tar gzip
            apk add curl
            pip3 install awscli
      # - run:
      #     name: Package Backend
      #     command: |
      #       cd backend
      #       npm install
      #       npm run build
      #       tar -czvf artifact.tar.gz dist/* package*
      #       ls 
      #       cd ..
      #       cp backend/artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files
      #       echo "List main folder"
      #       ls 
      #       # echo "Find the tar"
      #       # ls ~/project/.circleci/ansible/roles/deploy/files/
      #       # echo "inside ansible"
      #       # ls ~/project/.circleci/ansible/

      # - run:
      #     name: Package Backend
      #     command: |
      #       cd backend
      #       npm install
      #       npm run build
      #       tar -czvf artifact.tar.gz dist/* package*
      #       cd ..
      #       cd .circleci/ansible/roles/deploy
      #       mkdir files
      #       cd ..
      #       cd ..
      #       cd ..
      #       cd ..
      #       cp backend/artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml

      - destroy-environment:
          Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'  

      - revert-migrations:
          Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'
        

  smoke-test-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test
          command: |
            # Fetch and prepare the BACKEND_IP env var
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            API_URL="http://${BACKEND_IP}:3030"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - destroy-environment:
          Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'  

      - revert-migrations:
          Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'

  smoke-test-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"             
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi      
      - destroy-environment:
          Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'  

      - revert-migrations:
          Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'

    

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Update cloudfront distribution 
          command: |
            # get old workflow for clean
            OldS3WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $OldS3WorkflowID >> ~/OldS3WorkflowID.txt
            cat ~/OldS3WorkflowID.txt
            # curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
            # -H "X-Api-Key: ${THISDB_API_KEY}" \
            # -d "$OldWorkflowID"  

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople-newcloudfront

            OldWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            echo $OldWorkflowID >> ~/OldWorkflowID.txt #Called oldworkflowID because i need to remove all the front and backend stacks except InitialStack
            echo "$OldS3WorkflowID"
            echo "$OldWorkflowID"
      - destroy-environment:
          Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'  

      - revert-migrations:
          Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'

      # Here's where you will add some code to rollback on failure  


  docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get Old Workflow ID and Remove old stacks and files
          command: |
            OldS3WorkflowID=$(cat ~/OldS3WorkflowID.txt)
            OldWorkflowID=$(cat ~/OldWorkflowID.txt) #This value should be same as the current workflowID, just referencing for clarity
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            echo $OldS3WorkflowID
            echo $OldWorkflowID
            if [[ "$CurrentWorkflowID" != "$OldS3WorkflowID" ]]
            then
              echo '--------------------------------------Delete in Progress----------------------------------------'
              aws s3 rm "s3://$OldS3WorkflowID" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-$OldWorkflowID"
              aws cloudformation delete-stack --stack-name "udapeople-backend-$OldWorkflowID"
            else
              echo '--------------------------------------Nothing To Delete----------------------------------------'
            fi
      - destroy-environment:
          Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'  

      - revert-migrations:
          Workflow_ID: '${CIRCLE_WORKFLOW_ID:0:7}'
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test-backend:
          requires: [deploy-backend, deploy-frontend]
      - smoke-test-frontend:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test-backend, smoke-test-frontend]
      - cleanup:
          requires: [cloudfront-update]
